// === Set Module ===

// --- Set Construction ---
def emptySet() = Nil()
def singleton(x) = Cons(x, Nil())

// --- Insertion (ensures uniqueness) ---
def insert(x, Nil()) = Cons(x, Nil())
def insert(x, Cons(y, t)) = if(x == y, Cons(y, t), Cons(y, insert(x, t)))

// --- List to Set Conversion ---
def listToSet(Nil()) = emptySet()
def listToSet(Cons(h, t)) = insert(h, listToSet(t))

// --- Membership Test ---
def member(x, Nil()) = false
def member(x, Cons(y, t)) = if(x == y, true, member(x, t))

// --- Set Union ---
def union(Nil(), s2) = s2
def union(Cons(x, t), s2) = union(t, insert(x, s2))

// --- Set Intersection ---
def intersect(Nil(), s2) = Nil()
def intersect(Cons(x, t), s2) = if(member(x, s2), Cons(x, intersect(t, s2)), intersect(t, s2))

// --- Set Difference ---
def difference(Nil(), s2) = Nil()
def difference(Cons(x, t), s2) = if(member(x, s2), difference(t, s2), Cons(x, difference(t, s2)))

// --- Set Symmetric Difference ---
def symmetricDifference(a, b) = union(difference(a, b), difference(b, a))

// --- Set Properties ---
def isEmpty(Nil()) = true
def isEmpty(Cons(h, t)) = false
def size(Nil()) = 0
def size(Cons(h, t)) = 1 + size(t)

// --- Set.toString ---

def setToString(Nil()) = "{}"

def setToString(Cons(h, Nil())) = concat("{", concat(h, "}"))

def setToString(Cons(h, t)) =
    concat("{", concat(setToStringHelper(h, t), "}"))

def setToStringHelper(h, Nil()) = h

def setToStringHelper(h, Cons(h2, t)) =
    concat(h, concat(", ", setToStringHelper(h2, t)))



// === Unit Tests for Set Module ===
import UnitTest

// --- Construction ---
UnitTest.assertEquals("emptySet toString is {}", setToString(emptySet()), "{}")

UnitTest.assertEquals("singleton(1) creates {1}", setToString(singleton(1)), "{1}")

// --- Insert ---
UnitTest.assertEquals("insert into emptySet", setToString(insert(1, emptySet())), "{1}")

UnitTest.assertEquals("insert duplicate does not increase size",
    setToString(insert(1, insert(1, emptySet()))), "{1}")

UnitTest.assertEquals("insert multiple unique values",
    setToString(insert(3, insert(2, insert(1, emptySet())))), "{1, 2, 3}")

// --- listToSet ---
UnitTest.assertEquals("listToSet removes duplicates",
    setToString(listToSet([1,2,3,3,2,1])), "{1, 2, 3}")

// --- member ---
UnitTest.assertTrue("member finds 2 in {1,2,3}",
    member(2, listToSet(Cons(1, Cons(2, Cons(3, Nil()))))))

UnitTest.assertFalse("member fails on missing value",
    member(4, listToSet(Cons(1, Cons(2, Cons(3, Nil()))))))

// --- union ---
UnitTest.assertEquals("union of {1,2} and {2,3} is {1,2,3}",
    setToString(union(listToSet(Cons(1, Cons(2, Nil()))), listToSet(Cons(2, Cons(3, Nil()))))),
    "{3, 2, 1}"
)

// --- intersect ---
UnitTest.assertEquals("intersect of {1,2} and {2,3} is {2}",
    setToString(intersect(listToSet(Cons(1, Cons(2, Nil()))), listToSet(Cons(2, Cons(3, Nil()))))),
    "{2}"
)

// --- difference ---
UnitTest.assertEquals("difference of {1,2,3} minus {2,3} is {1}",
    setToString(difference(listToSet(Cons(1, Cons(2, Cons(3, Nil())))), listToSet(Cons(2, Cons(3, Nil()))))),
    "{1}"
)

// --- symmetricDifference ---
UnitTest.assertEquals("symmetricDifference of {1,2} and {2,3} is {1,3}",
    setToString(symmetricDifference(
        listToSet(Cons(1, Cons(2, Nil()))),
        listToSet(Cons(2, Cons(3, Nil())))
    )),
    "{3, 1}"
)

// --- isEmpty ---
UnitTest.assertTrue("isEmpty returns true on emptySet", isEmpty(emptySet()))

UnitTest.assertFalse("isEmpty returns false on non-empty set", isEmpty(singleton(42)))

// --- size ---
UnitTest.assertEquals("size of emptySet is 0", size(emptySet()), 0)

UnitTest.assertEquals("size of {1,2,3} is 3",
    size(listToSet(Cons(1, Cons(2, Cons(3, Nil()))))), 3)